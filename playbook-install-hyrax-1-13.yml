---
- hosts: default
  vars:
    hyrax_version: "1.13.3"
    bes_version: "3.17.4"
    libdap_version: "3.18.3"
    olfs_version: "1.16.1"

    opendap_rpm_distribution_directory: "centos7.1"
    opendap_rpm_distribution_string: "el7.centos"
    bes_rpm_release: "1"
    libdap_rpm_release: "1"

    bes_rpm_sha256: "79c01dfa5ed29b2834ec88970ecf1bd2262c03d689de31172e2f6afc0168d702"
    libdap_rpm_sha256: "b77e7c9e86e7f4ead194b3d6356f1b4b2019d3fd8dfd4be702d6f84953d705ab"
    olfs_tgz_sha256: "9e17f21b4053b451ea9805c3835d733d83c1833b8f55beec598b7817075ff402"

    tomcat_unpack_wars: yes

    olfs_content_file_list:
      - .INIT
      # - catalog.xml
      # - idFilter.xml
      # - memberships.xml
      - olfs.xml
      # - PEPFilter.xml
      # - viewers.xml
      # - wcs.xml
      # - webstart.xml

  vars_files:
    - hyrax_vars.yml
    - instances_vars.yml

  tasks:
    - become: no
      include: hyrax_downloads.yml

    - name: deploy bes software
      become: yes
      block:
        - package:
            name:
              - "{{ downloads }}/{{ bes_rpm }}"
              - "{{ downloads }}/{{ libdap_rpm }}"
            state: installed

        - stat:
            path: /etc/logrotate.d/besd.logrotate
          register: besd_logrotate
        - stat:
            path: /etc/logrotate.d/besd.logrotate.rpmorig
          register: besd_logrotate_rpmorig
        - command:
            argv:
              - mv
              - -v
              - /etc/logrotate.d/besd.logrotate
              - /etc/logrotate.d/besd.logrotate.rpmorig
          when: besd_logrotate.stat.exists and not besd_logrotate_rpmorig.stat.exists
        - file:
            path: /etc/logrotate.d/besd.logrotate
            state: absent

        - copy:
            src: "bes@.service"
            dest: "/etc/systemd/system/"
            owner: root
            group: root
            mode: 0644

    - name: prepare bes instance sample data
      become: yes
      block:
        - loop: "{{ instances }}"
          loop_control:
            label: "{{ item.path_to_data_tree|dirname }}"
          file:
            path: "{{ item.path_to_data_tree|dirname }}"
            state: directory
            owner: root
            group: root
            mode: 0755
        - loop: "{{ instances }}"
          loop_control:
            label: "{{ item.path_to_data_tree }}"
          file:
            path: "{{ item.path_to_data_tree }}"
            state: link
            src: /usr/share/hyrax/data

    - name: deploy bes instances
      become: yes
      block:
        - loop: "{{ instances }}"
          loop_control:
            label: "/etc/logrotate.d/bes-{{ item.shortname }}"
          copy:
            dest: "/etc/logrotate.d/bes-{{ item.shortname }}"
            content: |
              /var/log/bes-{{ item.shortname }}/*log {
                  su bes bes
                  daily
                  dateext
                  rotate 8
                  missingok
                  notifempty
                  sharedscripts
                  compress
                  delaycompress
                  copytruncate
              }

        - loop: "{{ instances }}"
          loop_control:
            label: "/var/log/bes-{{ item.shortname }}"
          file:
            path: "/var/log/bes-{{ item.shortname }}"
            state: directory
            owner: bes
            group: bes
            mode: 0775

        - loop: "{{ instances }}"
          loop_control:
            label: "/var/cache/bes-{{ item.shortname }}"
          file:
            path: "/var/cache/bes-{{ item.shortname }}"
            state: directory
            owner: bes
            group: bes
            mode: 0775

        - loop: "{{ instances }}"
          loop_control:
            label: "/etc/bes-{{ item.shortname }}"
          copy:
            dest: "/etc/bes-{{ item.shortname }}"
            src: /etc/bes/
            remote_src: yes
            mode: preserve

        - loop: "{{ instances }}"
          loop_control:
            label: "/etc/bes-{{ item.shortname }}/modules/zz-instance.conf"
          copy:
            dest: "/etc/bes-{{ item.shortname }}/modules/zz-instance.conf"
            content: |
              BES.Catalog.catalog.RootDirectory={{ item.path_to_data_tree }}
              BES.Data.RootDirectory=/dev/null
              BES.LogName=/var/log/bes-{{ item.shortname }}/bes.log
              BES.ServerIP=127.0.0.1
              BES.ServerPort={{ item.bes.server_port }}
              BES.UncompressCache.dir=/var/cache/bes-{{ item.shortname }}

        - loop: "{{ instances }}"
          loop_control:
            label: "/etc/bes-{{ item.shortname }}/modules/zz-handler-extras.conf"
          copy:
            dest: "/etc/bes-{{ item.shortname }}/modules/zz-handler-extras.conf"
            content: |
              BES.Catalog.catalog.TypeMatch+=ff:.*\.txt(\.bz2|\.gz|\.Z)?$;
              BES.Catalog.catalog.TypeMatch+=h5:.*\.hdf5(\.bz2|\.gz|\.Z)?$;

        - loop: "{{ instances }}"
          loop_control:
            label: "bes@{{ item.shortname }}"
          service:
            name: "bes@{{ item.shortname }}"
            enabled: yes
            state: started

    - name: deploy olfs
      become: yes
      block:
        - name: start deploy olfs
          set_fact:
            tomcats_to_restart: []

        - name: set unpackWARs
          loop: "{{ instances }}"
          loop_control:
            label: "/var/lib/tomcats/{{ item.shortname }}/conf/server.xml"
          xml:
            path: "/var/lib/tomcats/{{ item.shortname }}/conf/server.xml"
            xpath: /Server/Service[@name="Catalina"]/Engine[@name="Catalina"]/Host[@name="localhost"]
            attribute: unpackWARs
            value: "{{ 'true' if tomcat_unpack_wars else 'false' }}"
          register: server_xml_unpack_wars
          notify: restart tomcat
        - loop: "{{ server_xml_unpack_wars.results }}"
          loop_control:
            label: "check restart tomcat@{{ item.item.shortname }}"
          when: item.changed
          set_fact:
            tomcats_to_restart: "{{ tomcats_to_restart|union([item.item.shortname]) }}"

        - loop: "{{ instances }}"
          loop_control:
            label: "/etc/sysconfig/tomcat@{{ item.shortname }}.d/hyrax-olfs.conf"
          copy:
            dest: "/etc/sysconfig/tomcat@{{ item.shortname }}.d/hyrax-olfs.conf"
            content: |
              export OLFS_CONFIG_DIR=/var/lib/tomcats/{{ item.shortname }}/content/opendap
            owner: root
            group: root
            mode: 0644
          register: sysconfig_olfs
          notify: restart tomcat
        - loop: "{{ sysconfig_olfs.results }}"
          loop_control:
            label: "check restart tomcat@{{ item.item.shortname }}"
          when: item.changed
          set_fact:
            tomcats_to_restart: "{{ tomcats_to_restart|union([item.item.shortname]) }}"

        - loop: "{{ instances }}"
          loop_control:
            label: "/var/lib/tomcats/{{ item.shortname }}/content/opendap"
          file:
            path: "/var/lib/tomcats/{{ item.shortname }}/content/opendap"
            state: directory
            owner: tomcat
            group: tomcat
            mode: 02775

        - name: stat olfs content
          loop: "{{ instances|product(olfs_content_file_list)|list }}"
          loop_control:
            label: "/var/lib/tomcats/{{ item.0.shortname }}/content/opendap/{{ item.1 }}"
          stat:
            path: "/var/lib/tomcats/{{ item.0.shortname }}/content/opendap/{{ item.1 }}"
          register: olfs_content
        - loop: "{{ olfs_content.results }}"
          loop_control:
            label: "{{ item.invocation.module_args.path }}"
          when: not item.stat.exists
          copy:
            remote_src: yes
            src: "{{ extractions }}/{{ olfs_tgz_name }}/opendap/WEB-INF/conf/{{ item.item.1 }}"
            dest: "{{ item.invocation.module_args.path }}"
            owner: tomcat
            group: tomcat
            mode: 0664
          register: copy_olfs_content
        - loop: "{{ copy_olfs_content.results }}"
          loop_control:
            label: "check restart tomcat@{{ item.item.item.0.shortname }}"
          when: item.changed
          set_fact:
            tomcats_to_restart: "{{ tomcats_to_restart|union([item.item.item.0.shortname]) }}"

        - name: set olfs.xml bes port
          loop: "{{ instances }}"
          loop_control:
            label: "/var/lib/tomcats/{{ item.shortname }}/content/opendap/olfs.xml"
          xml:
            path: "/var/lib/tomcats/{{ item.shortname }}/content/opendap/olfs.xml"
            xpath: /OLFSConfig/BESManager/BES/port
            value: "{{ item.bes.server_port|int }}"
          register: olfs_xml_bes_port
          notify: restart tomcat
        - loop: "{{ olfs_xml_bes_port.results }}"
          loop_control:
            label: "check restart tomcat@{{ item.item.shortname }}"
          when: item.changed
          set_fact:
            tomcats_to_restart: "{{ tomcats_to_restart|union([item.item.shortname]) }}"

        - name: deploy opendap.war
          loop: "{{ instances }}"
          loop_control:
            label: "/var/lib/tomcats/{{ item.shortname }}/webapps/opendap.war"
          copy:
            src: "{{ extractions }}/{{ olfs_tgz_name }}/opendap.war"
            dest: "/var/lib/tomcats/{{ item.shortname }}/webapps/opendap.war"
            owner: tomcat
            group: tomcat
            mode: 0644
          register: opendap_war
          notify: restart tomcat
        - loop: "{{ opendap_war.results }}"
          loop_control:
            label: "check restart tomcat@{{ item.item.shortname }}"
          when: item.changed
          set_fact:
            tomcats_to_restart: "{{ tomcats_to_restart|union([item.item.shortname]) }}"

  handlers:
    - name: restart tomcat
      become: yes
      loop: "{{ tomcats_to_restart|sort }}"
      service:
        name: "tomcat@{{ item }}"
        state: restarted

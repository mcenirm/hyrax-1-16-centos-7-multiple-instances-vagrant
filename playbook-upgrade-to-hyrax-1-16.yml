---
- hosts: default
  vars:
    hyrax_version: "1.16"
    bes_version: "3.20.6"
    libdap_version: "3.20.5"
    olfs_version: "1.18.6"

    opendap_rpm_distribution_directory: "centos-7.x"
    opendap_rpm_distribution_string: "el7"
    bes_rpm_release: "1"
    libdap_rpm_release: "1"

    bes_rpm_sha256: "987d6557dc94b7839bc89f78ed739e4a8bed497e0565e70f726fb1f97863a12b"
    libdap_rpm_sha256: "0f3b19468d442d84a6810dddeed1ce5c407d7a65d2556007b5db18ed0ed91e95"
    olfs_tgz_sha256: "b48235c4890235dba25940b1d433b6a732ab6f73fbd66b7886dc09c63b839a41"

    old_hyrax_version: "1.13"
    from_old_hyrax: "from-hyrax-{{ old_hyrax_version|replace('.','-') }}"
    tomcat_unpack_wars: yes

    olfs_content_file_list:
      # - catalog.xml
      - olfs.xml
      # - OperationsMetadata.xml
      # - ServiceIdentification.xml
      # - ServiceProvider.xml
      # - viewers.xml
      # - wcs_service.xml
      # - webstart.xml

  vars_files:
    - hyrax_vars.yml
    - instances_vars.yml

  tasks:
    - become: no
      include: hyrax_downloads.yml

    - name: shutdown old version
      become: yes
      block:
        - name: undeploy opendap
          loop: "{{ instances }}"
          loop_control:
            label: "/var/lib/tomcats/{{ item.shortname }}/webapps/opendap.war"
          file:
            path: "/var/lib/tomcats/{{ item.shortname }}/webapps/opendap.war"
            state: absent
        - name: wait for undeploy of opendap
          loop: "{{ instances }}"
          loop_control:
            label: "/var/lib/tomcats/{{ item.shortname }}/webapps/opendap"
          wait_for:
            path: "/var/lib/tomcats/{{ item.shortname }}/webapps/opendap"
            state: absent
        - name: stop and disable service
          loop: "{{ instances|product(['tomcat','bes'])|list }}"
          loop_control:
            label: "{{ item.1 }}@{{ item.0.shortname }}"
          service:
            name: "{{ item.1 }}@{{ item.0.shortname }}"
            enabled: no
            state: stopped

    - name: cleanup old bes
      become: yes
      block:
        - name: cleanup old logrotate
          file:
            path: /etc/logrotate.d/besd.logrotate.rpmorig
            state: absent
        - name: stat old bes directory
          loop: "{{ instances|product(['/etc','/var/cache','/var/log'])|list }}"
          loop_control:
            label: "{{ item.1 }}/bes-{{ item.0.shortname }}"
          stat:
            path: "{{ item.1 }}/bes-{{ item.0.shortname }}"
          register: stat_old_bes_dir
        - name: stat old bes directory saved
          loop: "{{ instances|product(['/etc','/var/cache','/var/log'])|list }}"
          loop_control:
            label: "{{ item.1 }}/bes-{{ item.0.shortname }}.{{ from_old_hyrax }}"
          stat:
            path: "{{ item.1 }}/bes-{{ item.0.shortname }}.{{ from_old_hyrax }}"
          register: stat_old_bes_dir_saved
        - name: save old bes directory
          loop: "{{ stat_old_bes_dir.results|zip(stat_old_bes_dir_saved.results)|list }}"
          loop_control:
            label: "{{ item.1.invocation.module_args.path }}"
          when: item.0.stat.exists and not item.1.stat.exists
          command:
            argv:
              - mv
              - --
              - "{{ item.0.invocation.module_args.path }}"
              - "{{ item.1.invocation.module_args.path }}"

    - name: cleanup old olfs
      become: yes
      block:
        - name: stat old olfs directory
          loop: "{{ instances }}"
          loop_control:
            label: "/var/lib/tomcats/{{ item.shortname }}/content/opendap"
          stat:
            path: "/var/lib/tomcats/{{ item.shortname }}/content/opendap"
          register: stat_old_olfs_content_dir
        - name: stat old olfs directory saved
          loop: "{{ instances }}"
          loop_control:
            label: "/var/lib/tomcats/{{ item.shortname }}/content/opendap.{{ from_old_hyrax }}"
          stat:
            path: "/var/lib/tomcats/{{ item.shortname }}/content/opendap.{{ from_old_hyrax }}"
          register: stat_old_olfs_content_dir_saved
        - name: save old olfs directories
          loop: "{{ stat_old_olfs_content_dir.results|zip(stat_old_olfs_content_dir_saved.results)|list }}"
          loop_control:
            label: "{{ item.1.invocation.module_args.path }}"
          when: item.0.stat.exists and not item.1.stat.exists
          command:
            argv:
              - mv
              - --
              - "{{ item.0.invocation.module_args.path }}"
              - "{{ item.1.invocation.module_args.path }}"

    - name: upgrade bes
      become: yes
      block:
        - name: upgrade package
          package:
            name:
              - "{{ downloads }}/{{ bes_rpm }}"
              - "{{ downloads }}/{{ libdap_rpm }}"
            state: latest

    - name: deploy bes instances
      become: yes
      block:
        - loop: "{{ instances }}"
          loop_control:
            label: "/etc/logrotate.d/bes-{{ item.shortname }}"
          copy:
            dest: "/etc/logrotate.d/bes-{{ item.shortname }}"
            content: |
              /var/log/bes-{{ item.shortname }}/*log {
                  su bes bes
                  daily
                  dateext
                  rotate 8
                  missingok
                  notifempty
                  sharedscripts
                  compress
                  delaycompress
                  copytruncate
              }

        - loop: "{{ instances }}"
          loop_control:
            label: "/var/log/bes-{{ item.shortname }}"
          file:
            path: "/var/log/bes-{{ item.shortname }}"
            state: directory
            owner: bes
            group: bes
            mode: 0775

        - loop: "{{ instances }}"
          loop_control:
            label: "/var/cache/bes-{{ item.shortname }}"
          file:
            path: "/var/cache/bes-{{ item.shortname }}"
            state: directory
            owner: bes
            group: bes
            mode: 0775

        - loop: "{{ instances }}"
          loop_control:
            label: "/etc/bes-{{ item.shortname }}"
          copy:
            dest: "/etc/bes-{{ item.shortname }}"
            src: /etc/bes/
            remote_src: yes
            mode: preserve

        - loop: "{{ instances }}"
          loop_control:
            label: "/etc/bes-{{ item.shortname }}/site.conf"
          copy:
            dest: "/etc/bes-{{ item.shortname }}/site.conf"
            content: |
              BES.Catalog.catalog.RootDirectory={{ item.path_to_data_tree }}
              BES.Catalog.catalog.TypeMatch+=ff:.*\.txt(\.bz2|\.gz|\.Z)?$;
              BES.Catalog.catalog.TypeMatch+=h5:.*\.hdf5(\.bz2|\.gz|\.Z)?$;
              BES.Data.RootDirectory=/dev/null
              BES.LogName=/var/log/bes-{{ item.shortname }}/bes.log
              BES.ServerIP=127.0.0.1
              BES.ServerPort={{ item.bes.server_port }}
              BES.UncompressCache.dir=/var/cache/bes-{{ item.shortname }}/hyrax_ux

        - loop: "{{ instances }}"
          loop_control:
            label: "bes@{{ item.shortname }}"
          service:
            name: "bes@{{ item.shortname }}"
            enabled: yes
            state: started

    - name: deploy olfs
      become: yes
      block:
        - name: start deploy olfs
          set_fact:
            tomcats_to_restart: []

        - name: set unpackWARs
          loop: "{{ instances }}"
          loop_control:
            label: "/var/lib/tomcats/{{ item.shortname }}/conf/server.xml"
          xml:
            path: "/var/lib/tomcats/{{ item.shortname }}/conf/server.xml"
            xpath: /Server/Service[@name="Catalina"]/Engine[@name="Catalina"]/Host[@name="localhost"]
            attribute: unpackWARs
            value: "{{ 'true' if tomcat_unpack_wars else 'false' }}"
          register: server_xml_unpack_wars
          notify: restart tomcat
        - loop: "{{ server_xml_unpack_wars.results }}"
          loop_control:
            label: "check restart tomcat@{{ item.item.shortname }}"
          when: item.changed
          set_fact:
            tomcats_to_restart: "{{ tomcats_to_restart|union([item.item.shortname]) }}"

        - loop: "{{ instances }}"
          loop_control:
            label: "/etc/sysconfig/tomcat@{{ item.shortname }}.d/hyrax-olfs.conf"
          copy:
            dest: "/etc/sysconfig/tomcat@{{ item.shortname }}.d/hyrax-olfs.conf"
            content: |
              export OLFS_CONFIG_DIR=/var/lib/tomcats/{{ item.shortname }}/content/opendap
            owner: root
            group: root
            mode: 0644
          register: sysconfig_olfs
          notify: restart tomcat
        - loop: "{{ sysconfig_olfs.results }}"
          loop_control:
            label: "check restart tomcat@{{ item.item.shortname }}"
          when: item.changed
          set_fact:
            tomcats_to_restart: "{{ tomcats_to_restart|union([item.item.shortname]) }}"

        - loop: "{{ instances }}"
          loop_control:
            label: "/var/lib/tomcats/{{ item.shortname }}/content/opendap"
          file:
            path: "/var/lib/tomcats/{{ item.shortname }}/content/opendap"
            state: directory
            owner: tomcat
            group: tomcat
            mode: 02775

        - name: stat olfs content
          loop: "{{ instances|product(olfs_content_file_list)|list }}"
          loop_control:
            label: "/var/lib/tomcats/{{ item.0.shortname }}/content/opendap/{{ item.1 }}"
          stat:
            path: "/var/lib/tomcats/{{ item.0.shortname }}/content/opendap/{{ item.1 }}"
          register: olfs_content
        - loop: "{{ olfs_content.results }}"
          loop_control:
            label: "{{ item.invocation.module_args.path }}"
          when: not item.stat.exists
          copy:
            remote_src: yes
            src: "{{ extractions }}/{{ olfs_tgz_name }}/opendap/WEB-INF/conf/{{ item.item.1 }}"
            dest: "{{ item.invocation.module_args.path }}"
            owner: tomcat
            group: tomcat
            mode: 0664
          register: copy_olfs_content
        - loop: "{{ copy_olfs_content.results }}"
          loop_control:
            label: "check restart tomcat@{{ item.item.item.0.shortname }}"
          when: item.changed
          set_fact:
            tomcats_to_restart: "{{ tomcats_to_restart|union([item.item.item.0.shortname]) }}"

        - name: set olfs.xml bes port
          loop: "{{ instances }}"
          loop_control:
            label: "/var/lib/tomcats/{{ item.shortname }}/content/opendap/olfs.xml"
          xml:
            path: "/var/lib/tomcats/{{ item.shortname }}/content/opendap/olfs.xml"
            xpath: /OLFSConfig/BESManager/BES/port
            value: "{{ item.bes.server_port|int }}"
          register: olfs_xml_bes_port
          notify: restart tomcat
        - loop: "{{ olfs_xml_bes_port.results }}"
          loop_control:
            label: "check restart tomcat@{{ item.item.shortname }}"
          when: item.changed
          set_fact:
            tomcats_to_restart: "{{ tomcats_to_restart|union([item.item.shortname]) }}"

        - name: deploy opendap.war
          loop: "{{ instances }}"
          loop_control:
            label: "/var/lib/tomcats/{{ item.shortname }}/webapps/opendap.war"
          copy:
            src: "{{ extractions }}/{{ olfs_tgz_name }}/opendap.war"
            dest: "/var/lib/tomcats/{{ item.shortname }}/webapps/opendap.war"
            owner: tomcat
            group: tomcat
            mode: 0644
          register: opendap_war
          notify: restart tomcat
        - loop: "{{ opendap_war.results }}"
          loop_control:
            label: "check restart tomcat@{{ item.item.shortname }}"
          when: item.changed
          set_fact:
            tomcats_to_restart: "{{ tomcats_to_restart|union([item.item.shortname]) }}"

  handlers:
    - name: restart tomcat
      become: yes
      loop: "{{ tomcats_to_restart|sort }}"
      service:
        name: "tomcat@{{ item }}"
        state: restarted
